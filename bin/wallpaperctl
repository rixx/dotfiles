#!/bin/zsh
# wallpaperctl can do three things:
# - process existing wallpapers with imagemagick, adding a black rectangle at the bottom
#   (useful for i3lock to place a clock and a typing indicator)
# - output the path of a random wallpaper matching the current resolution
# - set the wallpaper to a random wallpaper matching the current resolution

set -e

wallpaper_folder=~/lib/pics/wallpapers


# process a single folder, this is where the actual work is done
# needs to be a function so that the base_folder variable is in scope
function process_folder {
	base_folder=$1
	# exit early if unprocessed/ does not exist
	if [ ! -d $base_folder/unprocessed ]; then
		return;
	fi;

	processed_folder="$base_folder/processed"
	if [ ! -d $processed_folder ]; then
		mkdir -p $processed_folder;
	fi;

	# the rectangle should have a constant distance from the bottom, so we need to
	# base it on the resolution of the image
	if [[ $base_folder =~ '1080' ]]; then
		rectangles="rectangle 25,1050 325,970"
	elif [[ $base_folder =~ '1200' ]]; then
		rectangles="rectangle 25,1170 325,1090"
	else
		echo "Unknown resolution, skipping"
		return;
	fi;

	#res=$(xdpyinfo | grep dimensions | sed -r 's/^[^0-9]*([0-9]+x[0-9]+).*$/\1/')
	# resolution is in the name of the folder
	res=$(basename $base_folder)
	for f in $base_folder/unprocessed/*; do;
		if [[ $(file -b $f) =~ 'image data' ]]; then
			target="$processed_folder/${f:t}"
			if [[ ! -a "$target" ]]; then;
				echo $f
				tmpfile="$processed_folder/tmp.${f:t}"
				convert "$f" -resize "$res""^" -gravity center -extent "$res" "$tmpfile"
				convert "$tmpfile" -draw "fill #00000066 $rectangles" "$target"
				rm "$tmpfile"
			fi;
		fi;
	done;
}

# iterate over the different resolution directories in the wallpaper folder

function process_wallpapers {
	for base_folder in $wallpaper_folder/*; do
		unprocessed_folder="$base_folder/unprocessed"
		if [ -d $unprocessed_folder ]; then
			process_folder $base_folder
		fi;
	done;
}

function get_resolution {
	# We can't use xdpyinfo here, because it will sum up the resolutions of all monitors
	# and we only want the resolution of the primary monitor
	xrandr | grep ' primary' | sed -r 's/.* primary [^0-9]*([0-9]+x[0-9]+).*$/\1/'
}

function random_wallpaper {
	# First param is processed / unprocessed. Default to unprocessed.
	processed=${1:-unprocessed}
	res=$(get_resolution)
	# The wallpapers are stored in folders named after their resolution,
	# and then either unprocessed/ or processed/
	wallpapers=($wallpaper_folder/$res/$processed/*)
	# select a random wallpaper
	index=$((RANDOM % $#wallpapers))
	wallpaper=$wallpapers[$index]
	# param 2 is true/false, default to false
	if [[ $2 == true ]]; then
		feh $wallpaper --fullscreen
	else
		echo $wallpaper
	fi;
}

function set_wallpaper {
	feh --bg-fill $1
}

function usage {
	echo "Usage: wallpaperctl [command] [args]"
	echo ""
	echo "       wallpaperctl process"
	echo "       wallpaperctl random [--processed] [--show]"
	echo "       wallpaperctl set [wallpaper]  # defaults to random wallpaper"
	echo ""
}

if [[ $# -eq 0 ]]; then
	usage
	exit 0
fi

case $1 in
	process)
		process_wallpapers
		;;
	random)
		# parse flags
		process=unprocessed
		show=false
		while [[ $# -gt 1 ]]; do
			case $2 in
				--processed)
					process=processed
					;;
				--show)
					show=true
					;;
				*)
					echo "Unknown flag $2"
					usage
					exit 1
					;;
			esac
			shift
		done
		random_wallpaper $process $show
		;;
	set)
		# figure out if a wallpaper was specified
		if [[ $# -eq 2 ]]; then
			set_wallpaper $2
		else
			set_wallpaper $(random_wallpaper unprocessed)
		fi;
		;;
	*)
		usage
		exit 1
		;;
esac
