" This config requires Plug to install plugins.
" Follow the installation instructions here: https://github.com/junegunn/vim-plug#neovim=
" Then run :PlugInstall once, and you should be good to go.
"
" Also!
" Create virtualenv neovim, and install pynvim and pyright (for completion) and
" black (for F9 formatting)
" Then run :CocInstall coc-pyright

"""""""""""""""""""""""""""""""""""""""""""""
""  General Settings                       ""
"""""""""""""""""""""""""""""""""""""""""""""

" Use Vim settings (yay), rather than Vi settings (yuck)
" This must be first, because it changes other options as a side effect.
set nocompatible

" Show title, then edit indicator, then path, then annoying NVIM indicator
set title

"" Add .config/dotfiles/vim to runtimepath. Necessary for colorscheme at least
let &rtp .= ','.expand('~/.config/dotfiles/vim/')

if has('autocmd')
  filetype plugin indent on  " Load plugins according to detected filetype.
endif

"" set history size
set history=10000
set tabpagemax=50
set undolevels=10000
set undoreload=10000
set undodir=/home/rixx/.cache/vim/undo
set undofile
set backupdir=/home/rixx/.cache/vim/backup

" vim specific options here
if !has('nvim')
"" save:
"  - for 100 files
"  - buffer info will be saved,
"  - registers over 100Kbyte will be skipped,
"  - 1000 lines per register will be remembered,
"  - don't save highlighted searches,
"  - don't save marks for /temp
"  - save in ~/.vim/viminfo
  set viminfo='100,%,s100,<1000,h,r/temp,n/home/rixx/.cache/vim/viminfo

  if &ttimeoutlen == -1
    " Time out on keycodes but not mappings
    set ttimeout
    set ttimeoutlen=10
  endif
endif

"" read file again if it changes while open and unmodified in vim
set autoread
" Write to disk when navigating files
set autowrite
augroup AutoWrite
    autocmd! BufLeave * :update
augroup END

" Anything that is put in a register (mostly by yanking or deleting) is also put in the
" special + register, which is synced with the system clipboard
set clipboard+=unnamedplus

"" don't keep a backup file in version control directories
if has("vms")
    set nobackup
else
    set backup
endif

" don't change working directories to files
set noautochdir

" toggle insert (paste) mode by pressing INS
set pastetoggle=<INS>

" allow unsaved background buffers and remember marks/undo for them
set hidden

" allow backspacing over everything in insert mode
set backspace=indent,eol,start
set whichwrap+=<,>,h,l

" Delete comment character when joining comment lines
set formatoptions+=j
" Insert only one space when joining on punctuation like .
set nojoinspaces

" Make sure diffs get shown side-by-side
set diffopt=vertical

"" ignore case when searching, but be smart about it
set ignorecase
set smartcase

"" Highlight search results while typing and searching
set hlsearch
set incsearch
set showmatch
set matchtime=2

"" Always split right and below
set splitbelow
set splitright

"" Always report changed lines
set report=0

"" Faster, lazy redrawing when executing macros
set ttyfast
set lazyredraw

"" set utf8 as standard encoding and unix as file type
set encoding=utf8
set fileformats=unix,dos,mac
set shell=/bin/zsh

"" spell check with ,ss
set spelllang=en

"" regex
set magic

" don't see 07 as an octal number to be increased to 10
set nrformats-=octal

" various options copied from vim-sensible
set sessionoptions-=options
set viewoptions-=options

" Remember and restore curser position
autocmd BufReadPost *
     \ if line("'\"") > 3 && line("'\"") <= line("$") |
     \   exe "normal! g`\"" |
     \ endif

" Except for commit messages; start on top here every time
autocmd BufReadPost COMMIT_EDITMSG
  \ exe "normal! gg"

autocmd FileType mail execute "normal /^\\n\<CR>o"


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""  Spacing and indentation                               ""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" intendation

set autoindent
set smartindent
set expandtab
set tabstop=4
set shiftwidth=4
set softtabstop=4
set smarttab

"" do wrap, but don't break lines
set textwidth=0
set wrap
set wrapmargin=0



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""  visual stuff                                          ""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set background=light
colorscheme duochrome

" Allow color schemes to do bright colors without forcing bold.
if &t_Co == 8 && $TERM !~# '^Eterm'
  set t_Co=16
endif

if has('syntax') && !exists('g:syntax_on')
  syntax enable
endif

"" only highlight the first 400 columns
set synmaxcol=400

"" Use instead of colorcolum=120
"highlight ColorColumn ctermbg=red ctermfg=white
"call matchadd('Colorcolumn', '\%120v', 100)

"" Matchng parens
highlight MatchParen cterm=bold ctermbg=cyan ctermfg=white

" Highlight VCS conflict markers
match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$'

"" show line number of current line and relative line numbers otherwise
set relativenumber
set number

"" width of the column at the side of the window indicating folds
set foldcolumn=3
set nofoldenable
set foldmethod=marker

"" show cursor lines (horizontal and vertical)
set cursorline
"set cursorcolumn

"" display incomplete commands
set showcmd

"" set 7 lines and 5 columns between the cursor and the end of screen
set scrolloff=999
set sidescrolloff=5

" Make window navigation a little snappier
nnoremap <C-e> 3<C-e>
nnoremap <C-y> 3<C-y>

"" show as much as possible of the last line
set display+=lastline

"" show current position, bit shorter than normally
set ruler

"" mouse integration if mouse
if has('mouse')
  set mouse=a
  set mousehide
endif

"" how to display whitespace characters when set list
set list
set listchars=tab:┄┄╴,trail:░,extends:❯,precedes:❮,nbsp:·

"" always show status line
set laststatus=2

"" enable reading config off modified file
set modeline

" don't move cursor to beginning of line
set nostartofline


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""  Completion                                            ""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set complete-=i
" turn on the WiLd menu
set wildmenu
set wildmode=list:longest,full

set wildignore=*.o,*~,*.pyc,.tox,*.egg-info
set wildignore+=.git,.hg,.svn                            " Version control
set wildignore+=*.bmp,*.gif,*.jpg,*.jpeg,*.png           " Binary images
set wildignore+=*.DS_Store                               " OSX



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""  Key mappings                                          ""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"" set the map leader to ' '
let mapleader = "\<Space>"
let g:mapleader = "\<Space>"

"" Leader shortcuts
noremap <leader>ss :setlocal spell!<cr>
nnoremap zz :w\|bd<cr>
" Close all other splits
nnoremap <leader>o :only<cr>

" Easy buffer navigation
noremap <C-h>  <C-w>h
noremap <C-j>  <C-w>j
noremap <C-k>  <C-w>k
noremap <C-l>  <C-w>l
noremap <leader>v <C-w>v
noremap <leader>w <C-w>w

" remap F6 to breakpoint
nmap <F6> obreakpoint()<C-c>

"" Other shortcuts
" paste multiple lines with pppp
vnoremap <silent> y y`]
vnoremap <silent> p p`]
nnoremap <silent> p p`]

" Make jj be the new escape
inoremap jj <Esc>

" gx, but open paths with xdg-open async
nnoremap gX :silent :execute "!xdg-open" expand('%:p:h') . "/" . expand("<cfile>") " &"<cr>

" Exit terminal input mode with Escape
tnoremap <ESC><ESC> <C-\><C-N>

nnoremap <CR> G

" really really save
cmap w!! w !sudo tee %
map q: :q

" stay in visual after indent
vnoremap < <gv
vnoremap > >gv

" <Ctrl-l> redraws the screen and removes any search highlighting.
nnoremap <silent> <C-o> :nohlsearch<C-R>=has('diff')?'<Bar>diffupdate':''<CR><CR><C-L>
nnoremap , :

" Repeat last macro
nnoremap Q @@

" Remove trailing whitespace
nnoremap <leader>W :%s/\s\+$//<cr>:let @/=''<CR>

" Grab full document
nnoremap <leader>a ggVG

" Format JSON
nmap <leader>J :%!python -m json.tool<CR>:%s/\s\+$//g<CR>

" Abbreviations
noreab @@r r@rixx.de
inoremap @@tr Tobias<space>Kunze<space><r@rixx.de>

nnoremap <space>f za
nnoremap <space>F zA


nmap <leader>1 <Plug>AirlineSelectTab1
nmap <leader>2 <Plug>AirlineSelectTab2
nmap <leader>3 <Plug>AirlineSelectTab3
nmap <leader>4 <Plug>AirlineSelectTab4
nmap <leader>5 <Plug>AirlineSelectTab5
nmap <leader>6 <Plug>AirlineSelectTab6
nmap <leader>7 <Plug>AirlineSelectTab7
nmap <leader>8 <Plug>AirlineSelectTab8
nmap <leader>9 <Plug>AirlineSelectTab9
nmap <leader>0 <Plug>AirlineSelectTab0
" nmap <leader>N <Plug>AirlineSelectPrevTab
" nmap <leader>n <Plug>AirlineSelectNextTab
nmap <leader>N :bp<cr>
nmap <leader>n :bn<cr>
nmap <leader>d :bd<cr>


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""  File type specific settings                           ""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" assume .md files are markdown, not modula-2
augroup markdown
  autocmd!
  autocmd BufNewFile,BufReadPost *.md set filetype=markdown
  autocmd BufNewFile,BufReadPost *.md set colorcolumn=120
  autocmd BufNewFile,BufReadPost *.md set tw=120
  autocmd BufNewFile,BufReadPost *.md set formatoptions+=t
  autocmd BufNewFile,BufReadPost Dockerfile set filetype=dockerfile
  autocmd BufNewFile,BufReadPost *.vue set filetype=vue
  autocmd BufNewFile,BufRead /tmp/*mutt* set noautoindent filetype=mail wm=0 tw=78 nonumber digraph nolist nopaste

  autocmd Filetype cfg,json,mail,txt,text,xml,yaml,yml let b:copilot_enabled = v:false

  " Conceal links in Markdown
  autocmd Filetype markdown syn region markdownLink matchgroup=markdownLinkDelimiter start="(" end=")" contains=markdownUrl keepend contained conceal
  autocmd Filetype markdown syn region markdownLinkText matchgroup=markdownLinkTextDelimiter start="!\=\[\%(\%(\_[^][]\|\[\_[^][]*\]\)*]\%( \=[[(]\)\)\@=" end="\]\%( \=[[(]\)\@=" nextgroup=markdownLink,markdownId skipwhite contains=@markdownInline,markdownLineStart concealends
  autocmd BufNewFile,BufReadPost *.md set conceallevel=2
augroup end

augroup development
  autocmd!
  autocmd BufNewFile,BufReadPost *.py set foldmethod=indent
  autocmd BufNewFile,BufReadPost *.py set foldnestmax=5
  autocmd FileType python set sw=4 sts=4 et
  " Two-space indents in json
  autocmd! FileType json set sw=2 sts=2 expandtab
  autocmd BufNewFile,BufReadPost *.tsx set filetype=javascript
  " Compute syntax highlighting from beginning of file.
  autocmd BufEnter * :syntax sync fromstart

  autocmd FileType php let b:AutoPairs = AutoPairsDefine({'<?' : '?>', '<?php': '?>'})
  autocmd FileType ruby let b:AutoPairs = AutoPairsDefine({'begin': 'end//n]'})
  autocmd FileType *html let b:AutoPairs = AutoPairsDefine({'<!--' : '-->', '{%': '%}'})
augroup end

augroup ft_vim
    au!
    " Display help in a vsplit
    au BufWinEnter *.txt if &ft == 'help' | wincmd L | endif
augroup END

autocmd BufRead /tmp/mutt-* set tw=72


augroup templates
    au!
    autocmd BufNewFile *.vue 0r ~/.config/dotfiles/vim/templates/skeleton.vue
    autocmd BufNewFile ~/doc/wiki/journal/*.md :silent 0r !~/.config/dotfiles/vim/scripts/generate_journal_file.py '%:t'
augroup END

"""""""""""""""""""""""""""""""""""""""""""""
""  Plugin Settings                        ""
"""""""""""""""""""""""""""""""""""""""""""""

call plug#begin()

" Removes search highlight when not needed
Plug 'romainl/vim-cool'

" Open path:lineno in vim and with gF
Plug 'wsdjeg/vim-fetch'

" Increment/decrement dates
Plug 'tpope/vim-speeddating'

" Show key hints
Plug 'nvim-lua/plenary.nvim'
Plug 'm4xshen/hardtime.nvim'
Plug 'folke/which-key.nvim'
set noshowmode

Plug 'junegunn/fzf'
" [Buffers] Jump to the existing window if possible
let g:fzf_buffers_jump = 1
" Open at bottom of screen
let g:fzf_layout = { 'down': '30%' }
" Temporarily hide status line
autocmd  FileType fzf set laststatus=0 noshowmode noruler
  \| autocmd BufLeave <buffer> set laststatus=2 showmode ruler
nnoremap <C-T> :call fzf#run({ 'sink': 'vsplit', 'down': '30%' })<CR>
nnoremap <C-N> :call fzf#run({ 'sink': 'e', 'down': '30%' })<CR>
" open fzf with the wiki directory
nnoremap <leader>wt :call fzf#run({ 'sink': 'e', 'source': 'fd . /home/rixx/doc/wiki/' })<CR>

" airline
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
let g:airline_powerline_fonts = 1
let g:airline_detect_modified=1
let g:airline_highlighting_cache = 1
let g:airline_detect_paste=1
let g:airline_theme='sol'
" Show tabs on top, disable other extensions for performance reasons
" Mouse integration: click to go, middle click to close, right click to delete file
let g:airline_extensions = ['tabline']
let g:airline#extensions#tabline#enabled = 1
" Only show path if the filename isn't unique
let g:airline#extensions#tabline#formatter = 'unique_tail_improved'
let g:airline#extensions#tabline#overflow_marker = '…'
" Show buffer numbers
let g:airline#extensions#tabline#buffer_idx_mode = 1
let g:airline#extensions#tabline#buffer_min_count = 2

" zen mode: <leader> z
Plug 'folke/zen-mode.nvim'
Plug 'folke/twilight.nvim'
noremap <leader>z :ZenMode<cr>

" Better directory browsing
Plug 'tpope/vim-vinegar'
" -       open the directory browser / go up a directory
" I       show header again
" gh      toggle hidden files
" .       add file path to end of cmd
" y.      yank full file path
" ~       go to home
" CTRL-^  go back to file

" Toggle comments
Plug 'tpope/vim-commentary'
" gc      comment out motion
" gcc     comment out line (takes count)

" Surround text objects
Plug 'tpope/vim-surround'
" cs"'    change surrounding " to '
" cst"    change surrounding tag to " (matches html)
" ds"     delete surrounding "
" ysiw"   surround word with ". ( for with spaces, ) for without
" yss"    surround line with "
" in visual mode: S to surround a line
" Strike through this line
"" ysss strikes through line, ysiws strikes through word etc, ysiwo bolds word
let g:surround_{char2nr('s')} = "~~\r~~"
let g:surround_{char2nr('b')} = "**\r**"


" Repeat plugin commands with .
Plug 'tpope/vim-repeat'

" Automatically add closing braces and delete matching ones
Plug 'jiangmiao/auto-pairs'
" Do **not** jump to the next line when closing a perceived block
let g:AutoPairsMultilineClose = 0

" Auto-set tabs vs spaces
Plug 'tpope/vim-sleuth'

" Provides :G[it]
Plug 'tpope/vim-fugitive'
" GBrowse opens the current file on GitHub
" In blame:
" A    resize to end of author column
" C    to end of commit column
" D    to end of date column
" gq   close blame
" o    open patch in hsplit (GVsplit also works)
" -    reblame at commit!!!
"" vim-fugitive is slow with zsh stuff
set shell=bash

" Show git changes/diff indicator in side column
Plug 'lewis6991/gitsigns.nvim'
" [c           jump to next hunk
" <leader>hu   undo this hunk!!!, works with visual selection
" ic           hunk text object
set timeoutlen=400

" Provide context when scrolling <3
Plug 'wellle/context.vim'
" remove decoration from context
let g:context_highlight_tag = '<hide>'
nnoremap <leader>ct :ContextToggle<CR>

" Language specific plugins
Plug 'Glench/Vim-Jinja2-Syntax'
Plug 'posva/vim-vue'

" Format Python with F9
Plug 'psf/black'
nnoremap <F9> :Black<CR>

Plug 'github/copilot.vim'
""" Enable copilot always
let g:copilot_enabled = 1
let g:copilot_autocomplete = 1
let g:copilot_autocomplete_delay = 0
" copilot keybindings
inoremap <c-n> <Plug>(copilot-next)

Plug 'ggandor/leap.nvim'
" Use s and S to navigate to any two-letter combination

Plug 'RRethy/vim-illuminate'
" Highlight all instances of the word under the cursor

Plug 'tpope/vim-rsi'
" Readline in vim

Plug 'jeffkreeftmeijer/vim-numbertoggle'
" Turn relative line numbers off in non-focused window

Plug 'vimwiki/vimwiki'
""" vimwiki config
" <leader>ww opens index
" <leader>w<leader>w opens diary
" C-up and C-down navigate between diary entries
" <leader>wy/m opens diary yesterday or tomorrow
"
" = increases header level, - decreases
" [[ and ]] navigate headings. [= and =] to stay on same level
" tab and shift-tab cycle through links
" +, shift-enter, ctrl-enter create new link
" C-space toggles checkbox
" gnt goes to next unfinished task
" gl removes one checkbox, gL removes all in list
" gl- creates a list out of a line with symbol - (* also works, and 1 and a for ordered lists)
" gqq formats a table (you  can also use tab in insert to navigate etc, which will also format the table)
"
" ah is the text object of a header till next header, ih only the contents. aH and iH to include subheadings
let g:vimwiki_list = [{'path': '~/doc/wiki/', 'syntax': 'markdown', 'ext': 'md', 'diary_rel_path': 'journal/', 'diary_index': 'journal', 'diary_header': 'Journal', 'diary_frequency': 'daily', 'auto_diary_index': 1}]
" Use vimwiki globally for markdown
let g:vimwiki_global_ext = 1
" When navigating to a directory, open the index page instead of the directory
let g:vimwiki_dir_link = 'index'
let g:vimwiki_diary_months = {
      \ 1: 'Januar', 2: 'Februar', 3: 'März', 4: 'April', 5: 'Mai', 6: 'Juni',
      \ 7: 'Juli', 8: 'August', 9: 'September', 10: 'Oktober', 11: 'November', 12: 'Dezember'
      \}
let g:vimwiki_links_header = 'Sitemap'
let g:vimwiki_auto_header = 0


""" Completion
let g:python_host_prog = '/home/rixx/.local/share/virtualenvs/neovim/bin/python'
let g:python3_host_prog = '/home/rixx/.local/share/virtualenvs/neovim/bin/python'
Plug 'neoclide/coc.nvim', {'branch': 'release'}

" Use gd to go to actual definition
nmap <silent> gd <Plug>(coc-definition)

" Symbol renaming
nmap <leader>rn <Plug>(coc-rename)

set completeopt=noinsert,menuone,noselect,preview
" suppress the annoying 'match x of y', 'The only match' and 'Pattern not found' messages
set shortmess+=c

call plug#end()

" This one has to go after plug#end()
" Configure copilot to complete with <C-j>, and use tab for coc completion (or
" normal behavior if no completion is active)

imap <silent><script><expr> <C-j> copilot#Accept('\<CR>')
let g:copilot_no_tab_map = v:true

" Make sure we catch duplicate remaps of <tab>
verbose imap <tab>
function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction
inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1):
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

lua << EOF
require("hardtime").setup({
  disable_mouse = false,
  --show hints in insert mode too
  showmode = false,
})
require('twilight').setup({
  dimming = {
    alpha = 0.7,
    color = { "Normal", "#000000" },
    term_bg = "#fdf6e3",
  },
})
require('zen-mode').setup({
  window = {
    backdrop = 0.5,
    width = 110,
  },
  plugins = {
    gitsigns = { enabled = false },
  },
  on_open = function(win)
    vim.cmd('ContextToggle')
  end,
  on_close = function(win)
    vim.cmd('ContextToggle')
  end,
})
require('gitsigns').setup({
  signs = {
    add          = { text = '+' },
    change       = { text = '·' },
    delete       = { text = '-' },
    topdelete    = { text = '·' },
    changedelete = { text = '~' },
    untracked    = { text = '?' },
  },
  on_attach = function(bufnr)
    local gitsigns = require('gitsigns')
    
    local function map(mode, l, r, opts)
      opts = opts or {}
      opts.buffer = bufnr
      vim.keymap.set(mode, l, r, opts)
    end

    map('n', ']c', function() gitsigns.nav_hunk('next') end)
    map('n', '[c', function() gitsigns.nav_hunk('prev') end)
    map('n', '<leader>hs', gitsigns.stage_hunk)
    map('n', '<leader>hr', gitsigns.reset_hunk)
    map('v', '<leader>hs', function() gitsigns.stage_hunk {vim.fn.line('.'), vim.fn.line('v')} end)
    map('v', '<leader>hr', function() gitsigns.reset_hunk {vim.fn.line('.'), vim.fn.line('v')} end)
    map('n', '<leader>hS', gitsigns.stage_buffer)
    map('n', '<leader>hu', gitsigns.undo_stage_hunk)
    map('n', '<leader>hR', gitsigns.reset_buffer)
    map('n', '<leader>hp', gitsigns.preview_hunk)
    map('n', '<leader>hb', function() gitsigns.blame_line{full=true} end)
    map('n', '<leader>tb', gitsigns.toggle_current_line_blame)
    map('n', '<leader>hd', gitsigns.diffthis)
    map('n', '<leader>hD', function() gitsigns.diffthis('~') end)
    map('n', '<leader>td', gitsigns.toggle_deleted)
    map({'o', 'x'}, 'ih', ':<C-U>Gitsigns select_hunk<CR>')
  end
})

require('which-key').setup({
  window = {
    border = "shadow",
  },
})

require('leap').create_default_mappings()

EOF

" vim:set ft=vim et sw=2:
