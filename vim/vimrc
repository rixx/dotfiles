"""""""""""""""""""""""""""""""""""""""""""""
""  General Settings                       ""
"""""""""""""""""""""""""""""""""""""""""""""

" Use Vim settings (yay), rather than Vi settings (yuck)
" This must be first, because it changes other options as a side effect.
set nocompatible

"" Add .config/dotfiles/vim to runtimepath. Necessary for colorscheme at least
let &rtp .= ','.expand('~/.config/dotfiles/vim/')

filetype plugin indent on  " Load plugins according to detected filetype.

"" set history size
set history=1000
set tabpagemax=50
set undolevels=10000
set undoreload=10000
set undodir=/home/rixx/.cache/vim/undo
set undofile
set backupdir=/home/rixx/.cache/vim/backup

" vim specific options here
if !has('nvim')
"" save:
"  - for 100 files
"  - buffer info will be saved,
"  - registers over 100Kbyte will be skipped,
"  - 1000 lines per register will be remembered,
"  - don't save highlighted searches,
"  - don't save marks for /temp
"  - save in ~/.vim/viminfo
  set viminfo='100,%,s100,<1000,h,r/temp,n/home/rixx/.cache/vim/viminfo
endif

"" read file again if it changes while open and unmodified in vim
set autoread

set clipboard+=unnamedplus

"" set the map leader to ' '
let mapleader = "\<Space>"
let g:mapleader = "\<Space>"

"" Leader shortcuts
nnoremap <leader>w :w!<cr>
nnoremap <leader>wq :wq!<cr>
nnoremap <leader>q :wq!<cr>
nnoremap <leader>x :q!<cr>
noremap <leader>ss :setlocal spell!<cr>

" copy and paste to system clipboard
vmap <Leader>y "+y
vmap <Leader>d "+d
nmap <Leader>p "+p
nmap <Leader>P "+P
vmap <Leader>p "+p
vmap <Leader>P "+P

" Move splits in the direction shown, or create a new split
" nnoremap <silent> <C-h> :call WinMove('h')<cr>
" nnoremap <silent> <C-j> :call WinMove('j')<cr>
" nnoremap <silent> <C-k> :call WinMove('k')<cr>
" nnoremap <silent> <C-l> :call WinMove('l')<cr>
" function! WinMove(key)
"   let t:curwin = winnr()
"   exec "wincmd ".a:key
"   if (t:curwin == winnr())
"     if (match(a:key,'[jk]'))
"       wincmd v
"     else
"       wincmd s
"     endif
"     exec "wincmd ".a:key
"   endif
" endfunction

" enter visual mode with <leader><leader>
nmap <Leader><Leader> V

" remap F6 to breakpoint
nmap <F6> obreakpoint()<C-c>

"" Other shortcuts
" paste multiple lines with pppp
vnoremap <silent> y y`]
vnoremap <silent> p p`]
nnoremap <silent> p p`]

" enter to go to line or end of file, backspace to go to beginning
nnoremap <CR> G
nnoremap <BS> gg

" Make jj be the new escape
inoremap jj <Esc>

" Exit terminal input mode with Escape
tnoremap <ESC><ESC> <C-\><C-N>

" really really save
cmap w!! w !sudo tee %
map q: :q

" stay in visual after indent
vnoremap < <gv
vnoremap > >gv

"" don't keep a backup file in version control directories
if has("vms")
    set nobackup
else
    set backup
endif

" don't change working directories to files
set noautochdir

"" toggle insert (paste) mode by pressing INS
set pastetoggle=<INS>

"" hide abandoned buffers
set hidden

" allow backspacing over everything in insert mode
set backspace=indent,eol,start
set complete-=i
set whichwrap+=<,>,h,l

"" ignore case when searching, but be smart about it
set ignorecase
set smartcase

"" Highlight search results while typing and searching
set hlsearch
set incsearch
set showmatch
set matchtime=2

"" Always split right and below
set splitbelow
set splitright

"" Always report changed lines
set report=0

"" Faster, lazy redrawing
set ttyfast
set lazyredraw

"" set utf8 as standard encoding and unix as file type
set encoding=utf8
set fileformats=unix,dos,mac
set shell=/bin/zsh

"" spell check with ,ss
set spelllang=en

"" regex
set magic

"" intendation
set autoindent
set smartindent
set tabstop=4
set shiftwidth=4
set softtabstop=4
set smarttab
set expandtab

"" do wrap, but don't break lines
set textwidth=0
set wrap
set wrapmargin=0

" don't see 07 as an octal number to be increased to 10
set nrformats-=octal

" Remember and restore curser position
autocmd BufReadPost *
     \ if line("'\"") > 3 && line("'\"") <= line("$") |
     \   exe "normal! g`\"" |
     \ endif

" Except for commit messages; start on top here every time
autocmd BufReadPost COMMIT_EDITMSG
  \ exe "normal! gg"

" And adjust mutt messages, too
autocmd BufRead /tmp/mutt-* set tw=72


augroup templates
    autocmd BufNewFile *.vue 0r ~/.config/dotfiles/vim/templates/skeleton.vue
augroup END

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""  visual stuff                                          ""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set background=light
colorscheme duochrome

syntax enable

"" only highlight the first 240 columns
set synmaxcol=280

"" Use instead of colorcolum=120
"highlight ColorColumn ctermbg=red ctermfg=white
"call matchadd('Colorcolumn', '\%120v', 100)

"" Matchng parens
highlight MatchParen cterm=bold ctermbg=cyan ctermfg=white

"" show line number of current line and relative line numbers otherwise
set number

"" width of the column at the side of the window indicating folds
set foldcolumn=3
set nofoldenable
set foldmethod=marker

"" show cursor lines (horizontal and vertical)
set cursorline
"set cursorcolumn

"" display incomplete commands
set showcmd

"" set 7 lines and 5 columns between the cursor and the end of screen
set scrolloff=7
set sidescrolloff=5

"" show as much as possible of the last line
set display+=lastline

"" turn on the WiLd menu
set wildmenu
set wildmode=list:longest,full
set wildignore=*.o,*~,*.pyc

"" show current position, bit shorter than normally
set ruler

"" mouse integration if mouse
if has('mouse')
  set mouse=a
  set mousehide
endif

"" how to display whitespace characters when set list
set listchars=tab:>\ ,trail:-,extends:>,precedes:<,nbsp:+

"" always show status line
set laststatus=2

"" enable reading config off modified file
set modeline

" don't move cursor to beginning of line
set nostartofline

" <Ctrl-l> redraws the screen and removes any search highlighting.
nnoremap <silent> <C-o> :nohlsearch<C-R>=has('diff')?'<Bar>diffupdate':''<CR><CR><C-L>
nnoremap , :

" assume .md files are markdown, not modula-2
autocmd BufNewFile,BufReadPost *.md set filetype=markdown
autocmd BufNewFile,BufReadPost *.md set colorcolumn=120
autocmd BufNewFile,BufReadPost *.md set tw=120
autocmd BufNewFile,BufReadPost *.md set formatoptions+=t
autocmd BufNewFile,BufReadPost Dockerfile set filetype=dockerfile
autocmd BufNewFile,BufReadPost *.vue set filetype=vue
autocmd BufNewFile,BufRead /tmp/*mutt* set noautoindent filetype=mail wm=0 tw=78 nonumber digraph nolist nopaste

autocmd BufNewFile,BufReadPost *.tsx set filetype=javascript
" Repeat last macro
nnoremap Q @@

" augroup NoSimultaneousEdits
"   autocmd!
"   autocmd SwapExists * let v:swapchoice = 'o'
"   autocmd SwapExists * echo 'Duplicate edit session (readonly)'
"   autocmd SwapExists * echohl None
" augroup END

"""""""""""""""""""""""""""""""""""""""""""""
""  Plugin Settings                        ""
"""""""""""""""""""""""""""""""""""""""""""""

""" UNCOMMENT THIS WHEN YOU WANT TO USE VUNDLE

"let iCanHazVundle=1
"let vundle_readme=expand('~/.config/nvim/bundle/Vundle.vim/README.md')
"if !filereadable(vundle_readme)
"    echo "Installing Vundle.."
"    echo ""
"    silent !mkdir -p ~/.config/nvim/bundle
"    silent !git clone https://github.com/VundleVim/Vundle.vim ~/.config/nvim/bundle/Vundle.vim
"    let iCanHazVundle=0
"endif
"
set rtp+=~/.config/nvim/bundle/Vundle.vim

call vundle#begin("~/.config/nvim/bundle")

"if iCanHazVundle == 0
"    echo "Installing Bundles, please ignore key map error messages"
"    echo ""
"    :BundleInstall
"endif

" :BundleList          - list configured bundles
" :BundleInstall(!)    - install(update) bundles
" :BundleSearch(!) foo - search(or refresh cache first) for foo
" :BundleClean(!)      - confirm(or auto-approve) removal of unused bundles

"Plugin 'VundleVim/Vundle.vim'  "Uncomment to update vundle
Plugin 'tpope/vim-sensible'
Plugin 'tpope/vim-commentary'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-sleuth'
Plugin 'posva/vim-vue'
Plugin 'Glench/Vim-Jinja2-Syntax'
Plugin 'junegunn/goyo.vim'
Plugin 'jiangmiao/auto-pairs'
Plugin 'airblade/vim-gitgutter'
Plugin 'vimwiki/vimwiki'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'

if has('nvim')
  Plugin 'ncm2/ncm2'
endif

call vundle#end()

"" vim-fugitive is slow with zsh stuff
set shell=bash

"" gitgutter diff colours
set updatetime=100  " Catch updates after 100ms

" airline
" display buffers instead of tabs when only one tab is open
let g:airline_extensions = []
let g:airline_powerline_fonts = 1
let g:airline_detect_modified=1
let g:airline_highlighting_cache = 1
let g:airline_detect_paste=1
let g:airline_theme='sol'

" let ranger/file browser be toggled by F9
nnoremap <f9> :tabe %:p:h<cr>

let g:syntastic_always_populate_loc_list = 0
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0

"" Goyo: zen mode
let g:goyo_width = 90
noremap <leader>z :Goyo<cr>

"" plugin python-mode configuration
" <leader> b for breakpoints
" <leader> r for execution
let g:pymode_options_max_line_length = 119
let g:pymode_python = 'python3'
let g:pymode_lint_onfly = 1
let g:pymode_lint_checkers = ['pyflakes', 'pylint', 'pep8', 'mccabe']
let g:pymode_lint_ignore = "E501"
let g:pymode_rope = 0
let g:pymode_syntax_print_as_function = 1

""" vimwiki
" ww opens the index
" wd deletes wiki page
" wr renames wiki page
"
" wi opens diary index, w i updates it
" w w opens today's diary
" w y opens yesterday's diary
" w m opens tomorrow's diary
" C-up: previous diary page, C-down next diary page
"
" = indents headers, - dedents
" [[ go to last headline, ]] go to next headline
" tab: move to next link
" enter: go to page/make page
" backspace: last page
" plus: generate link without going there
" C-space: toggle checkbox!
" gl-space: remove checkbox
" gln: make checkbox more done, glp make less done
" gll: increade list level, glh decrease
" glr: renumber list
" gl-: make list item, gl1: make numbered list item
" gqq: format table
"
" :tag: tags things
" VimwikiTOC creates toc
" TODO: lookup compl-omni and tagsrch
let g:vimwiki_use_mouse = 1
let g:vimwiki_list = [{
  \ 'path': '~/doc/wiki/',
  \ 'syntax': 'markdown',
  \ 'ext': '.md',
  \ 'auto_toc': 1,
  \ 'auto_tags': 1,
  \ 'auto_diary_index': 1,
  \ }]

""" ncm2
" Create virtualenv neovim, and install pynvim and jedi

let g:python_host_prog = '/home/rixx/.local/share/virtualenvs/neovim/bin/python'
let g:python3_host_prog = '/home/rixx/.local/share/virtualenvs/neovim/bin/python'
let g:ncm2_jedi#environment = '/home/rixx/.local/share/virtualenvs/neovim/bin/python'
autocmd BufEnter * call ncm2#enable_for_buffer()
set completeopt=noinsert,menuone,noselect
Plugin 'roxma/nvim-yarp'
Plugin 'ncm2/ncm2-bufword'
Plugin 'ncm2/ncm2-path'
Plugin 'ncm2/ncm2-jedi'
Plugin 'ncm2/ncm2-syntax'
Plugin 'Shougo/neco-syntax'

" suppress the annoying 'match x of y', 'The only match' and 'Pattern not found' messages
set shortmess+=c

" Use <TAB> to select the popup menu:
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

" vim:set ft=vim et sw=2:
