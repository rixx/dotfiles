"""""""""""""""""""""""""""""""""""""""""""""
""  General Settings                       ""
"""""""""""""""""""""""""""""""""""""""""""""

" Use Vim settings (yay), rather than Vi settings (yuck)
" This must be first, because it changes other options as a side effect.
set nocompatible

"" set history size
set history=1000		
set tabpagemax=50
set undolevels=10000
set undoreload=10000
set undodir=~/.vim/undo
set undofile
set backupdir=~/.vim/backup

"" save: 
"  - for 100 files
"  - buffer info will be saved, 
"  - registers over 100Kbyte will be skipped,
"  - 1000 lines per register will be remembered,
"  - don't save highlighted searches,
"  - don't save marks for /temp
"  - save in ~/.vim/viminfo
set viminfo='100,%,s100,<1000,h,r/temp,n~/.vim/viminfo

"" read file again if it changes while open and unmodified in vim
set autoread

"" set the map leader to '+'
let mapleader = "\<Space>"
let g:mapleader = "\<Space>"

"" Leader shortcuts
" map: mapping in all modes (normal, visual, select, operator)
" nmap: mapping in normal mode
" vmap: mapping in visual and select mode
" .noremap: don't follow another remapping, execute the given command
" see :help map-modes
 
" really really save
cmap w!! w !sudo tee %

nnoremap <leader>w :w!<cr>
map q: :q
nnoremap <leader>q :wq!<cr>
nnoremap <leader>qq :q!<cr>
noremap <leader>ss :setlocal spell!<cr>

" copy and paste to system clipboard
vmap <Leader>y "+y
vmap <Leader>d "+d
nmap <Leader>p "+p
nmap <Leader>P "+P
vmap <Leader>p "+p
vmap <Leader>P "+P

" stay in visual after indent
vnoremap < <gv
vnoremap > >gv

" enter visual mode with <leader><leader>
nmap <Leader><Leader> V

" paste multiple lines with pppp
vnoremap <silent> y y`]
vnoremap <silent> p p`]
nnoremap <silent> p p`]

" enter to go to line or end of file, backspace to go to beginning
nnoremap <CR> G
nnoremap <BS> gg

"" don't keep a backup file in version control directories
if has("vms")
    set nobackup
else
    set backup
endif

" don't change working directories to files
set noautochdir

"" toggle insert (paste) mode by pressing INS
set pastetoggle=<INS>

"" hide abandoned buffers
set hidden

" allow backspacing over everything in insert mode
set backspace=indent,eol,start
set complete-=i
set whichwrap+=<,>,h,l

"" ignore case when searching, but be smart about it
set ignorecase
set smartcase
set hlsearch
set incsearch
set showmatch
set matchtime=2

"" set utf8 as standard encoding and unix as file type
set encoding=utf8
set fileformats=unix,dos,mac
set shell=/bin/zsh

"" spell check with ,ss
set spelllang=en

"" regex
set magic

"" intendation
set autoindent
set smartindent
set tabstop=4
set shiftwidth=4
set softtabstop=4
set smarttab
set expandtab

"" do wrap, but don't break lines
set textwidth=0
set wrap
set wrapmargin=0

" don't see 07 as an octal number to be increased to 10
set nrformats-=octal

" Remember and restore curser position
autocmd BufReadPost *
     \ if line("'\"") > 0 && line("'\"") <= line("$") |
     \   exe "normal! g`\"" |
     \ endif

" Except for commit messages; start on top here every time
autocmd BufReadPost COMMIT_EDITMSG
  \ exe "normal! gg"


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""  visual stuff                                          ""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set background=dark
syntax enable

"" show line number of current line and relative line numbers otherwise
set number
set relativenumber

"" width of the column at the side of the window indicating folds
set foldcolumn=3
set nofoldenable
set foldmethod=marker

"" show cursor lines (horizontal and vertical)
set cursorline
set cursorcolumn

"" display incomplete commands
set showcmd

"" set 7 lines and 5 columns between the cursor and the end of screen
set scrolloff=7
set sidescrolloff=5

"" show as much as possible of the last line
set display+=lastline

"" turn on the WiLd menu
set wildmenu
set wildmode=list:longest,full
set wildignore=*.o,*~,*.pyc

"" show current position, bit shorter than normally
set ruler
set rulerformat=%15(%c%V\ %p%%%)

"" mouse integration if mouse
if has('mouse')
  set mouse=a
  set mousehide
endif

"" how to display whitespace characters when set list
set listchars=tab:>\ ,trail:-,extends:>,precedes:<,nbsp:+

"" always show status line
set laststatus=2

"" enable reading config off modified file
set modeline

" don't move cursor to beginning of line
set nostartofline

" <Ctrl-l> redraws the screen and removes any search highlighting.
nnoremap <silent> <C-L> :nohlsearch<C-R>=has('diff')?'<Bar>diffupdate':''<CR><CR><C-L>

" assume .md files are markdown, not modula-2
autocmd BufNewFile,BufReadPost *.md set filetype=markdown
autocmd BufNewFile,BufReadPost *.md set colorcolumn=120
autocmd BufNewFile,BufReadPost *.md set tw=120
autocmd BufNewFile,BufReadPost *.md set formatoptions+=t

autocmd BufNewFile,BufReadPost Dockerfile set filetype=dockerfile

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" Python specific configuration
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
autocmd FileType python setlocal tabstop=4
autocmd FileType python setlocal expandtab
autocmd FileType python setlocal shiftwidth=4
autocmd FileType python setlocal softtabstop=4
autocmd FileType python setlocal shiftround
autocmd FileType python setlocal nospell
autocmd FileType python match DiffChange '\%>79v.\+'


"""""""""""""""""""""""""""""""""""""""""""""
""  Plugin Settings                        ""
"""""""""""""""""""""""""""""""""""""""""""""
let iCanHazVundle=1
let vundle_readme=expand('~/.vim/bundle/vundle/README.md')
if !filereadable(vundle_readme)
    echo "Installing Vundle.."
    echo ""
    silent !mkdir -p ~/.vim/bundle
    silent !git clone https://github.com/gmarik/vundle ~/.vim/bundle/vundle
    let iCanHazVundle=0
endif

set rtp+=~/.vim/bundle/vundle
call vundle#rc()

" Bundle 'tpope/vim-fugitive' (GitHub)
" Bundle 'L9' (vim-scripts)
" Bundle 'git://git.wincent.com/command-t.git'
"
" :BundleList          - list configured bundles
" :BundleInstall(!)    - install(update) bundles
" :BundleSearch(!) foo - search(or refresh cache first) for foo
" :BundleClean(!)      - confirm(or auto-approve) removal of unused bundles

Plugin 'altercation/vim-colors-solarized'
Plugin 'bling/vim-airline'
Plugin 'chriskempson/base16-vim'
Plugin 'jiangmiao/auto-pairs'
Plugin 'scrooloose/nerdtree'
Plugin 'scrooloose/syntastic'
Plugin 'sjl/gundo.vim'
Plugin 'tpope/vim-afterimage'
Plugin 'tpope/vim-commentary'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-sensible'

" vundle
if iCanHazVundle == 0
    echo "Installing Bundles, please ignore key map error messages"
    echo ""
    :BundleInstall
endif

" airline
" display buffers instead of tabs when only one tab is open
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1
let g:airline_detect_modified=1
let g:airline_detect_paste=1
let g:airline_powerline_fonts = 1

" NERDTree
" open NERDTree if no files were specified (http://vimawesome.com/plugin/the-nerd-tree)
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
let NERDTreeIgnore=['\.pyc', '\~$', '\.swo$', '\.swp$', '\.git', '\.hg', '\.svn', '\.bzr']
let NERDTreeQuitOnOpen=1

" let NERDTree be toggled by E
map <S-e> :NERDTreeToggle<CR>

" recommended syntastic options
"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*
"let g:syntastic_python_flake8_args = "--ignore=E501,W0611,W0401"

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" Gundo
nnoremap <F5> :GundoToggle<CR>

" solarized
"let g:solarized_termcolors=256
"colorscheme solarized 
set background=dark
"let base16colorspace=256
colorscheme base16-monokai

"" plugin python-mode configuration
let pymode_lint_onfly = 1
let pymode_lint_checker = "pylint,pyflakes,pep8,mccabe"
let pymode_lint_hold = 0
let pymode_lint_jump = 0

" vim:set ft=vim et sw=2:
