" This config requires Plug to install plugins.
" Follow the installation instructions here: https://github.com/junegunn/vim-plug#neovim=
" Then run :PlugInstall once, and you should be good to go.
"
" Also!
" Create virtualenv neovim, and install pynvim and jedi (for completion) and
" black (for F9 formatting)

"""""""""""""""""""""""""""""""""""""""""""""
""  General Settings                       ""
"""""""""""""""""""""""""""""""""""""""""""""

" Use Vim settings (yay), rather than Vi settings (yuck)
" This must be first, because it changes other options as a side effect.
set nocompatible

"" Add .config/dotfiles/vim to runtimepath. Necessary for colorscheme at least
let &rtp .= ','.expand('~/.config/dotfiles/vim/')

if has('autocmd')
  filetype plugin indent on  " Load plugins according to detected filetype.
endif

"" set history size
set history=10000
set tabpagemax=50
set undolevels=10000
set undoreload=10000
set undodir=/home/rixx/.cache/vim/undo
set undofile
set backupdir=/home/rixx/.cache/vim/backup

" vim specific options here
if !has('nvim')
"" save:
"  - for 100 files
"  - buffer info will be saved,
"  - registers over 100Kbyte will be skipped,
"  - 1000 lines per register will be remembered,
"  - don't save highlighted searches,
"  - don't save marks for /temp
"  - save in ~/.vim/viminfo
  set viminfo='100,%,s100,<1000,h,r/temp,n/home/rixx/.cache/vim/viminfo
  if &ttimeoutlen == -1
    set ttimeout
    set ttimeoutlen=100
  endif
endif

"" read file again if it changes while open and unmodified in vim
set autoread

" Anything that is put in a register (mostly by yanking or deleting) is also put in the
" special + register, which is synced with the system clipboard
set clipboard+=unnamedplus

"" set the map leader to ' '
let mapleader = "\<Space>"
let g:mapleader = "\<Space>"

"" Leader shortcuts
nmap <leader><leader> :
nnoremap <leader>w :w!<cr>
nnoremap <leader>wq :wq!<cr>
nnoremap <leader>q :q!<cr>
noremap <leader>ss :setlocal spell!<cr>
" Close all other splits
nnoremap <leader>o :only<cr>

" remap F6 to breakpoint
nmap <F6> obreakpoint()<C-c>

"" Other shortcuts
" paste multiple lines with pppp
vnoremap <silent> y y`]
vnoremap <silent> p p`]
nnoremap <silent> p p`]

" Make jj be the new escape
inoremap jj <Esc>

" gx, but open paths with xdg-open async
nnoremap gX :silent :execute "!xdg-open" expand('%:p:h') . "/" . expand("<cfile>") " &"<cr>

" Exit terminal input mode with Escape
tnoremap <ESC><ESC> <C-\><C-N>

nnoremap <CR> G

" really really save
cmap w!! w !sudo tee %
map q: :q

" stay in visual after indent
vnoremap < <gv
vnoremap > >gv

"" don't keep a backup file in version control directories
if has("vms")
    set nobackup
else
    set backup
endif

" don't change working directories to files
set noautochdir

" toggle insert (paste) mode by pressing INS
set pastetoggle=<INS>

" allow unsaved background buffers and remember marks/undo for them
set hidden

" allow backspacing over everything in insert mode
set backspace=indent,eol,start
set complete-=i
set whichwrap+=<,>,h,l

" Delete comment character when joining comment lines
set formatoptions+=j
" Insert only one space when joining on punctuation like .
set nojoinspaces

" Make sure diffs get shown side-by-side
set diffopt=vertical

"" ignore case when searching, but be smart about it
set ignorecase
set smartcase

"" Highlight search results while typing and searching
set hlsearch
set incsearch
set showmatch
set matchtime=2

"" Always split right and below
set splitbelow
set splitright

"" Always report changed lines
set report=0

"" Faster, lazy redrawing when executing macros
set ttyfast
set lazyredraw

"" set utf8 as standard encoding and unix as file type
set encoding=utf8
set fileformats=unix,dos,mac
set shell=/bin/zsh

"" spell check with ,ss
set spelllang=en

"" regex
set magic

"" intendation
set autoindent
set smartindent
set expandtab
set tabstop=4
set shiftwidth=4
set softtabstop=4
set smarttab

"" do wrap, but don't break lines
set textwidth=0
set wrap
set wrapmargin=0

" don't see 07 as an octal number to be increased to 10
set nrformats-=octal

" various options copied from vim-sensible
set sessionoptions-=options
set viewoptions-=options

" Remember and restore curser position
autocmd BufReadPost *
     \ if line("'\"") > 3 && line("'\"") <= line("$") |
     \   exe "normal! g`\"" |
     \ endif

" Except for commit messages; start on top here every time
autocmd BufReadPost COMMIT_EDITMSG
  \ exe "normal! gg"

" And adjust mutt messages, too
autocmd BufRead /tmp/mutt-* set tw=72


augroup templates
    autocmd BufNewFile *.vue 0r ~/.config/dotfiles/vim/templates/skeleton.vue
augroup END

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""  visual stuff                                          ""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set background=light
colorscheme duochrome

" Allow color schemes to do bright colors without forcing bold.
if &t_Co == 8 && $TERM !~# '^Eterm'
  set t_Co=16
endif

if has('syntax') && !exists('g:syntax_on')
  syntax enable
endif

"" only highlight the first 240 columns
set synmaxcol=280

"" Use instead of colorcolum=120
"highlight ColorColumn ctermbg=red ctermfg=white
"call matchadd('Colorcolumn', '\%120v', 100)

"" Matchng parens
highlight MatchParen cterm=bold ctermbg=cyan ctermfg=white

"" show line number of current line and relative line numbers otherwise
set number

"" width of the column at the side of the window indicating folds
set foldcolumn=3
set nofoldenable
set foldmethod=marker

"" show cursor lines (horizontal and vertical)
set cursorline
"set cursorcolumn

"" display incomplete commands
set showcmd

"" set 7 lines and 5 columns between the cursor and the end of screen
set scrolloff=7
set sidescrolloff=5

"" show as much as possible of the last line
set display+=lastline

"" turn on the WiLd menu
set wildmenu
set wildmode=list:longest,full
set wildignore=*.o,*~,*.pyc

"" show current position, bit shorter than normally
set ruler

"" mouse integration if mouse
if has('mouse')
  set mouse=a
  set mousehide
endif

"" how to display whitespace characters when set list
set listchars=tab:>\ ,trail:-,extends:>,precedes:<,nbsp:+

"" always show status line
set laststatus=2

"" enable reading config off modified file
set modeline

" don't move cursor to beginning of line
set nostartofline

" <Ctrl-l> redraws the screen and removes any search highlighting.
nnoremap <silent> <C-o> :nohlsearch<C-R>=has('diff')?'<Bar>diffupdate':''<CR><CR><C-L>
nnoremap , :

" assume .md files are markdown, not modula-2
augroup markdown
  autocmd!
  autocmd BufNewFile,BufReadPost *.md set filetype=markdown
  autocmd BufNewFile,BufReadPost *.md set colorcolumn=120
  autocmd BufNewFile,BufReadPost *.md set tw=120
  autocmd BufNewFile,BufReadPost *.md set formatoptions+=t
  autocmd BufNewFile,BufReadPost Dockerfile set filetype=dockerfile
  autocmd BufNewFile,BufReadPost *.vue set filetype=vue
  autocmd BufNewFile,BufRead /tmp/*mutt* set noautoindent filetype=mail wm=0 tw=78 nonumber digraph nolist nopaste

  " Conceal links in Markdown
  autocmd Filetype markdown syn region markdownLink matchgroup=markdownLinkDelimiter start="(" end=")" contains=markdownUrl keepend contained conceal
  autocmd Filetype markdown syn region markdownLinkText matchgroup=markdownLinkTextDelimiter start="!\=\[\%(\%(\_[^][]\|\[\_[^][]*\]\)*]\%( \=[[(]\)\)\@=" end="\]\%( \=[[(]\)\@=" nextgroup=markdownLink,markdownId skipwhite contains=@markdownInline,markdownLineStart concealends
  autocmd BufNewFile,BufReadPost *.md set conceallevel=2
augroup end

augroup development
  autocmd!
  autocmd BufNewFile,BufReadPost *.py set foldmethod=indent
  autocmd BufNewFile,BufReadPost *.py set foldnestmax=2
  autocmd FileType python set sw=4 sts=4 et
  " Two-space indents in json
  autocmd! FileType json set sw=2 sts=2 expandtab
  autocmd BufNewFile,BufReadPost *.tsx set filetype=javascript
  " Compute syntax highlighting from beginning of file.
  autocmd BufEnter * :syntax sync fromstart
augroup end
nnoremap <space>f za
nnoremap <space>F zA

" Repeat last macro
nnoremap Q @@

" Abbreviations
noreab @@r r@rixx.de
inoremap @@tr Tobias<space>Kunze<space><r@rixx.de>

"""""""""""""""""""""""""""""""""""""""""""""
""  Plugin Settings                        ""
"""""""""""""""""""""""""""""""""""""""""""""

call plug#begin()

""" General plugins
" Removes search highlight when not needed
Plug 'romainl/vim-cool'
Plug 'junegunn/fzf'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
" Provides zen mode with <space> z
Plug 'junegunn/goyo.vim'
" Increment/decrement dates
Plug 'tpope/vim-speeddating'
Plug 'tpope/vim-vinegar'
""" Code plugins
" Add gc (gcc, gcap etc) to toggle comments
Plug 'tpope/vim-commentary'
" Automatically add closing braces and delete matching ones
Plug 'jiangmiao/auto-pairs'
" Auto-set tabs vs spaces
Plug 'tpope/vim-sleuth'
" Provides :G[it]
Plug 'tpope/vim-fugitive'
" Show git changes/diff indicator in side column
Plug 'airblade/vim-gitgutter'
" Provide context when scrolling <3
Plug 'wellle/context.vim'
" Language specific plugins
Plug 'Glench/Vim-Jinja2-Syntax'
Plug 'posva/vim-vue'
Plug 'psf/black'

""" Completion
let g:python_host_prog = '/home/rixx/.local/share/virtualenvs/neovim/bin/python'
let g:python3_host_prog = '/home/rixx/.local/share/virtualenvs/neovim/bin/python'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'pappasam/coc-jedi', { 'do': 'yarn install --frozen-lockfile && yarn build', 'branch': 'main' }

verbose imap <tab>

call plug#end()

"" vim-fugitive is slow with zsh stuff
set shell=bash

"" gitgutter update speed
set updatetime=100  " Catch updates after 100ms

" remove decoration from context
let g:context_highlight_tag = '<hide>'

" airline
let g:airline_powerline_fonts = 1
let g:airline_detect_modified=1
let g:airline_highlighting_cache = 1
let g:airline_detect_paste=1
let g:airline_theme='sol'
" Show tabs on top, disable other extensions for performance reasons
" Mouse integration: click to go, middle click to close, right click to delete file
let g:airline_extensions = ['tabline']
let g:airline#extensions#tabline#enabled = 1
" Only show path if the filename isn't unique
let g:airline#extensions#tabline#formatter = 'unique_tail_improved'
let g:airline#extensions#tabline#overflow_marker = '…'
" Show buffer numbers
let g:airline#extensions#tabline#buffer_idx_mode = 1
let g:airline#extensions#tabline#buffer_min_count = 2

nmap <leader>1 <Plug>AirlineSelectTab1
nmap <leader>2 <Plug>AirlineSelectTab2
nmap <leader>3 <Plug>AirlineSelectTab3
nmap <leader>4 <Plug>AirlineSelectTab4
nmap <leader>5 <Plug>AirlineSelectTab5
nmap <leader>6 <Plug>AirlineSelectTab6
nmap <leader>7 <Plug>AirlineSelectTab7
nmap <leader>8 <Plug>AirlineSelectTab8
nmap <leader>9 <Plug>AirlineSelectTab9
nmap <leader>0 <Plug>AirlineSelectTab0
" nmap <leader>N <Plug>AirlineSelectPrevTab
" nmap <leader>n <Plug>AirlineSelectNextTab
nmap <leader>N :bp<cr>
nmap <leader>n :bn<cr>
nmap <leader>d :bd<cr>

" Autoformat with black on F9
nnoremap <F9> :Black<CR>

" Goyo: zen mode
let g:goyo_width = 90
noremap <leader>z :Goyo<cr>

" Completion
" Use <TAB> to select the popup menu:
inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1):
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"
" Use gd to go to actual definition
nmap <silent> gd <Plug>(coc-definition)
set completeopt=noinsert,menuone,noselect,preview
" suppress the annoying 'match x of y', 'The only match' and 'Pattern not found' messages
set shortmess+=c

"""" fzf config
" [Buffers] Jump to the existing window if possible
let g:fzf_buffers_jump = 1

" Open at bottom of screen
let g:fzf_layout = { 'down': '30%' }

" Temporarily hide status line
autocmd  FileType fzf set laststatus=0 noshowmode noruler
  \| autocmd BufLeave <buffer> set laststatus=2 showmode ruler

nnoremap <C-T> :call fzf#run({ 'sink': 'vsplit', 'down': '30%' })<CR>
nnoremap <C-O> :call fzf#run({ 'sink': 'e', 'down': '30%' })<CR>
" vim:set ft=vim et sw=2:
