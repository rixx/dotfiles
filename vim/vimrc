"""""""""""""""""""""""""""""""""""""""""""""
""  General Settings                       ""
"""""""""""""""""""""""""""""""""""""""""""""

" Use Vim settings (yay), rather than Vi settings (yuck)
" This must be first, because it changes other options as a side effect.
set nocompatible

filetype plugin indent on  " Load plugins according to detected filetype.

"" set history size
set history=1000
set tabpagemax=50
set undolevels=10000
set undoreload=10000
set undodir=/home/rixx/.cache/vim/undo
set undofile
set backupdir=/home/rixx/.cache/vim/backup

" vim specific options here
if !has('nvim')
"" save:
"  - for 100 files
"  - buffer info will be saved,
"  - registers over 100Kbyte will be skipped,
"  - 1000 lines per register will be remembered,
"  - don't save highlighted searches,
"  - don't save marks for /temp
"  - save in ~/.vim/viminfo
  set viminfo='100,%,s100,<1000,h,r/temp,n/home/rixx/.cache/vim/viminfo
endif

"" read file again if it changes while open and unmodified in vim
set autoread

set clipboard+=unnamedplus

"" set the map leader to ' '
let mapleader = "\<Space>"
let g:mapleader = "\<Space>"

"" Leader shortcuts
nnoremap <leader>w :w!<cr>
nnoremap <leader>wq :wq!<cr>
nnoremap <leader>q :wq!<cr>
nnoremap <leader>x :q!<cr>
noremap <leader>ss :setlocal spell!<cr>

" copy and paste to system clipboard
vmap <Leader>y "+y
vmap <Leader>d "+d
nmap <Leader>p "+p
nmap <Leader>P "+P
vmap <Leader>p "+p
vmap <Leader>P "+P

" enter visual mode with <leader><leader>
nmap <Leader><Leader> V

"" Other shortcuts
" paste multiple lines with pppp
vnoremap <silent> y y`]
vnoremap <silent> p p`]
nnoremap <silent> p p`]

" enter to go to line or end of file, backspace to go to beginning
nnoremap <CR> G
nnoremap <BS> gg

" Make jj be the new enter
inoremap jj <Esc>

" really really save
cmap w!! w !sudo tee %
map q: :q

" stay in visual after indent
vnoremap < <gv
vnoremap > >gv

"" don't keep a backup file in version control directories
if has("vms")
    set nobackup
else
    set backup
endif

" don't change working directories to files
set noautochdir

"" toggle insert (paste) mode by pressing INS
set pastetoggle=<INS>

"" hide abandoned buffers
set hidden

" allow backspacing over everything in insert mode
set backspace=indent,eol,start
set complete-=i
set whichwrap+=<,>,h,l

"" ignore case when searching, but be smart about it
set ignorecase
set smartcase

"" Highlight search results while typing and searching
set hlsearch
set incsearch
set showmatch
set matchtime=2

"" Always report changed lines
set report=0

"" Faster, lazy redrawing
set ttyfast
set lazyredraw

"" set utf8 as standard encoding and unix as file type
set encoding=utf8
set fileformats=unix,dos,mac
set shell=/bin/zsh

"" spell check with ,ss
set spelllang=en

"" regex
set magic

"" intendation
set autoindent
set smartindent
set tabstop=4
set shiftwidth=4
set softtabstop=4
set smarttab
set expandtab

"" do wrap, but don't break lines
set textwidth=0
set wrap
set wrapmargin=0

" don't see 07 as an octal number to be increased to 10
set nrformats-=octal

" Remember and restore curser position
autocmd BufReadPost *
     \ if line("'\"") > 3 && line("'\"") <= line("$") |
     \   exe "normal! g`\"" |
     \ endif

" Except for commit messages; start on top here every time
autocmd BufReadPost COMMIT_EDITMSG
  \ exe "normal! gg"

" And adjust mutt messages, too
autocmd BufRead /tmp/mutt-* set tw=72


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""  visual stuff                                          ""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set background=dark
syntax enable

"" only highlight the first 240 columns
set synmaxcol=240

"" Use instead of colorcolum=120
highlight ColorColumn ctermbg=blue
call matchadd('Colorcolumn', '\%120v', 100)

"" show line number of current line and relative line numbers otherwise
set number

"" width of the column at the side of the window indicating folds
set foldcolumn=3
set nofoldenable
set foldmethod=marker

"" show cursor lines (horizontal and vertical)
set cursorline
set cursorcolumn

"" display incomplete commands
set showcmd

"" set 7 lines and 5 columns between the cursor and the end of screen
set scrolloff=7
set sidescrolloff=5

"" show as much as possible of the last line
set display+=lastline

"" turn on the WiLd menu
set wildmenu
set wildmode=list:longest,full
set wildignore=*.o,*~,*.pyc

"" show current position, bit shorter than normally
set ruler

"" mouse integration if mouse
if has('mouse')
  set mouse=a
  set mousehide
endif

"" how to display whitespace characters when set list
set listchars=tab:>\ ,trail:-,extends:>,precedes:<,nbsp:+

"" always show status line
set laststatus=2

"" enable reading config off modified file
set modeline

" don't move cursor to beginning of line
set nostartofline

" <Ctrl-l> redraws the screen and removes any search highlighting.
nnoremap <silent> <C-L> :nohlsearch<C-R>=has('diff')?'<Bar>diffupdate':''<CR><CR><C-L>
nnoremap , :

" assume .md files are markdown, not modula-2
autocmd BufNewFile,BufReadPost *.md set filetype=markdown
autocmd BufNewFile,BufReadPost *.md set colorcolumn=120
autocmd BufNewFile,BufReadPost *.md set tw=120
autocmd BufNewFile,BufReadPost *.md set formatoptions+=t
autocmd BufNewFile,BufReadPost Dockerfile set filetype=dockerfile

" augroup NoSimultaneousEdits
"   autocmd!
"   autocmd SwapExists * let v:swapchoice = 'o'
"   autocmd SwapExists * echo 'Duplicate edit session (readonly)'
"   autocmd SwapExists * echohl None
" augroup END

"""""""""""""""""""""""""""""""""""""""""""""
""  Plugin Settings                        ""
"""""""""""""""""""""""""""""""""""""""""""""
let iCanHazVundle=1
let vundle_readme=expand('~/.config/nvim/bundle/vundle/README.md')
if !filereadable(vundle_readme)
    echo "Installing Vundle.."
    echo ""
    silent !mkdir -p ~/.config/nvim/bundle
    silent !git clone https://github.com/gmarik/vundle ~/.config/nvim/bundle/vundle
    let iCanHazVundle=0
endif

set rtp+=~/.config/nvim/bundle/vundle
call vundle#begin("~/.config/nvim/bundle")

"
" :BundleList          - list configured bundles
" :BundleInstall(!)    - install(update) bundles
" :BundleSearch(!) foo - search(or refresh cache first) for foo
" :BundleClean(!)      - confirm(or auto-approve) removal of unused bundles

Plugin 'bling/vim-airline'
"Plugin 'chriskempson/base16-vim'
Plugin 'jiangmiao/auto-pairs'
"Plugin 'klen/python-mode'
Plugin 'posva/vim-vue'
"Plugin 'scrooloose/syntastic'
Plugin 'tpope/vim-commentary'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-sensible'
Plugin 'tpope/vim-sleuth'
Plugin 'Glench/Vim-Jinja2-Syntax'

if has('nvim')
  Plugin 'roxma/nvim-completion-manager'
endif

call vundle#end()

" vundle
if iCanHazVundle == 0
    echo "Installing Bundles, please ignore key map error messages"
    echo ""
    :BundleInstall
endif

" airline
" display buffers instead of tabs when only one tab is open
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1
let g:airline_detect_modified=1
let g:airline_detect_paste=1

" let ranger/file browser be toggled by F9
nnoremap <f9> :tabe %:p:h<cr>

let g:syntastic_always_populate_loc_list = 0
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0

" solarized
"set background=dark
"let base16colorspace=256
"colorscheme base16-grayscale-dark
"if filereadable(expand("~/.config/nvim/vimrc_background"))
  "source ~/.vimrc_background
"endif

"" plugin python-mode configuration
" <leader> b for breakpoints
" <leader> r for execution
" don't use rope
let g:pymode_options_max_line_length = 119
let g:pymode_python = 'python3'
let g:pymode_lint_onfly = 1
let g:pymode_lint_checkers = ['pyflakes', 'pylint', 'pep8', 'mccabe']
let g:pymode_lint_ignore = "E501"
let g:pymode_rope = 0
let g:pymode_syntax_print_as_function = 1

""" vim-completion-manager
" do not show irrelevant messages
set shortmess+=c
" Pressing <enter> hides the menu *and* creates a newline
inoremap <expr> <CR> (pumvisible() ? "\<c-y>\<cr>" : "\<CR>")
" Use <tab> to select the popup menu
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
" Expand with C-u/Enter
imap <expr> <CR>  (pumvisible() ?  "\<c-y>\<Plug>(expand_or_nl)" : "\<CR>")
imap <expr> <Plug>(expand_or_nl) (cm#completed_is_snippet() ? "\<C-U>":"\<CR>")
" Leave menu with c-c
inoremap <c-c> <ESC>
" Use a venv with the necessary packages
let g:python_host_prog = '/home/rixx/.virtualenvs/neovim/bin/python'
let g:python3_host_prog = '/home/rixx/.virtualenvs/neovim/bin/python'

" vim:set ft=vim et sw=2:
