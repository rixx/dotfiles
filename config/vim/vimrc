"""""""""""""""""""""""""""""""""""""""""""""
""  General Settings                       ""
"""""""""""""""""""""""""""""""""""""""""""""
" Use Vim settings, rather than Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

call vundle#rc()

" original repos on github
" Bundle 'tpope/vim-fugitive'
" vim-scripts repos
" Bundle 'L9'
" non github repos
" Bundle 'git://git.wincent.com/command-t.git'
"
" Brief help
" :BundleList          - list configured bundles
" :BundleInstall(!)    - install(update) bundles
" :BundleSearch(!) foo - search(or refresh cache first) for foo
" :BundleClean(!)      - confirm(or auto-approve) removal of unused bundles
"
" see :h vundle for more details or wiki for FAQ
" NOTE: comments after Bundle command are not allowed..


Plugin 'altercation/vim-colors-solarized'
Plugin 'jiangmiao/auto-pairs'
Plugin 'scrooloose/nerdtree'
Plugin 'scrooloose/syntastic'
Plugin 'sjl/gundo.vim'
Plugin 'tpope/vim-afterimage'
Plugin 'tpope/vim-commentary'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-sensible'


filetype plugin indent on  " also required for vundle and an all-over good idea

" Plugin configuration
let g:solarized_termtrans=1
colorscheme solarized

" open NERDTree if no files were specified (http://vimawesome.com/plugin/the-nerd-tree)
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

" let NERDTree be toggled by E
map <S-e> :NERDTreeToggle<CR>

" recommended syntastic options
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0


"" set history size
set history=1000		
set tabpagemax=50
set sessionoptions-=options

"" set to auto read when a file is changed from the outside
set autoread

"" set the map leader to '+'
let mapleader = "+"
let g:mapleader = "+"

"" fast saving
nmap <leader>w :w!<cr>
nmap <leader>q :wq!<cr>

"" don't keep a backup file in version control directories
if has("vms")
    set nobackup
else
    set backup
endif

"" display incomplete commands
set showcmd

"" set 7 lines between the cursor and the end of screen
set scrolloff=7
set sidescrolloff=5
set display+=lastline

"" turn on the WiLd menu
set wildmenu
set wildmode=list:longest,full
set wildignore=*.o,*~,*.pyc

"" show current position
set ruler

"" TODO
set pastetoggle=<INS>

"" hide abandoned buffers
set hid

" allow backspacing over everything in insert mode
set backspace=indent,eol,start
set complete-=i
set whichwrap+=<,>,h,l

"" ignore case when searching, but be smart about it
set ignorecase
set smartcase

"" highlight search results, behave like in a browser
set hlsearch
set incsearch

"" regex
set magic

"" highlight matching brackets and blink shortly
set showmatch
set mat=2

"" intendation
set autoindent
set smartindent
set wrap

set relativenumber
set nofoldenable

autocmd BufReadPost *
     \ if line("'\"") > 0 && line("'\"") <= line("$") |
     \   exe "normal! g`\"" |
     \ endif
" Remember info about open buffers on close
set viminfo='100,%,s100,<1000,h,r/temp


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""  visual stuff                                          ""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set background=dark
syntax enable
set number
set foldcolumn=3

"" cursor config
set cursorline
set cursorcolumn

"" mouse integration
if has('mouse')
  set mouse=a
  set mousehide
endif

"" set utf8 as standard encoding and unix as file type
set encoding=utf8
set listchars=tab:>\ ,trail:-,extends:>,precedes:<,nbsp:+
set ffs=unix,dos,mac

set shell=/bin/zsh

"" spell check with ,ss
set spelllang=en
map <leader>ss :setlocal spell!<cr>

"" always show status line
set laststatus=2

"" enable reading config off modified file
set modeline


" <Ctrl-l> redraws the screen and removes any search highlighting.
nnoremap <silent> <C-L> :nohlsearch<C-R>=has('diff')?'<Bar>diffupdate':''<CR><CR><C-L>

set tabstop=4
set shiftwidth=4
set softtabstop=4
set smarttab
set expandtab

set nrformats-=octal

set backupdir=~/.vim/backup

" assume .md files are markdown, not modula-2
autocmd BufNewFile,BufReadPost *.md set filetype=markdown


nnoremap <F5> :GundoToggle<CR>
set undodir=~/.vim/undo
set undofile
"maximum number of changes that can be undone
set undolevels=1000000
"maximum number lines to save for undo on a buffer reload
set undoreload=10000000

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" Python specific configuration
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
autocmd FileType python setlocal tabstop=4
autocmd FileType python setlocal expandtab
autocmd FileType python setlocal shiftwidth=4
autocmd FileType python setlocal softtabstop=4
autocmd FileType python setlocal shiftround
autocmd FileType python setlocal nospell

autocmd FileType python match DiffChange '\%>79v.\+'

"" Key bindings
""" Execute or compile:
"autocmd FileType python map <F5> :w<CR>:silent !echo "\n\x1b[7mpython %\x1b[0m"<CR>:!time python "%"<CR>
"autocmd FileType python imap <F5> <ESC><F5>
autocmd FileType python map <C-F5> :w<CR>:!time pycompile *<CR>
autocmd FileType python imap <C-F5> <ESC><C-F5>
""" Execute doctest
autocmd FileType python map <F6> :w<CR>:silent !python -m doctest "%" \| less<CR>:redraw!<CR>
autocmd FileType python imap <F6> <ESC><F6>
autocmd FileType python map <C-F6> :w<CR>:silent !python -m doctest -v "%" \| less<CR>:redraw!<CR>
autocmd FileType python imap <C-F6> <ESC><C-F6>
""" Execute pylint
autocmd FileType python map <F7> :w<CR>:silent !pylint "%" \| less -R<CR>:redraw!<CR>
autocmd FileType python imap <F7> <ESC><F7>
autocmd FileType python map <C-F7> :w<CR>:silent !pylint *.py \| less -R<CR>:redraw!<CR>
autocmd FileType python imap <C-F7> <ESC><C-F7>
""" Execute pep8
autocmd FileType python map <F8> :w<CR>:silent !pep8 -v --statistics --benchmark "%" \| less<CR>:redraw!<CR>
autocmd FileType python imap <F8> <ESC><F8>
autocmd FileType python map <C-F8> :w<CR>:silent !pep8 -v --statistics --benchmark . \| less<CR>:redraw!<CR>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" plugin python-mode configuration
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let pymode_lint_onfly = 1
let pymode_lint_checker = "pylint,pyflakes,pep8,mccabe"
let pymode_lint_hold = 0
let pymode_lint_jump = 0

" vim:set ft=vim et sw=2:
